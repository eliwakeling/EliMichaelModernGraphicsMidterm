color4 calcColor(in sViewport vp, in sRay ray, in float time, in vec4 mousePos)
{
    sSphere spheres[2];
    // out sSphere s, in sPoint pos, in sScalar size, in color4 color, in color4 lightColor
    float ratio = vp.resolution.x * vp.resolutionInv.y;
    float sphereSize = 0.2;
    initSphere(spheres[0], vec3(-ratio - 0.3, -1.0 + sphereSize / eToTheX(-0.5), -1.0), sphereSize, vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0));
    initSphere(spheres[1], vec3(-ratio - 0.0, -1.0 + sphereSize, 0.0), sphereSize, vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0));
    
    sLight lights[spheres.length() + 1];
    // out sLight l, in sPoint pos, in sScalar intensity, in color4 color
    initLight(lights[0], vec3(2.0 * (mousePos.x * vp.resolutionInv.y) - ratio, 2.0 * (mousePos.y * vp.resolutionInv.y) - 1.0, 0.2), 50.0, vec4(1.0, 1.0, 1.0, 1.0));
    initLight(lights[1], vec3(0.0), 100.0, spheres[0].lightColor);
    initLight(lights[2], vec3(0.0), 100.0, spheres[1].lightColor);
    
    int sphereIndex = -1;
    float nearestDepth = -100000.0;
    vec3 finalSphereColor = vec3(0.0);
    vec3 position, normal;
    for (int i = spheres.length() - 1; i >= 0; --i) {
        moveSphere(spheres[i].pos, time, float(i), 0.0);
        lights[i+1].pos = spheres[i].pos;
        
        vec3 dp;
        dp.xy = ray.direction.xy - spheres[i].pos.xy;
        float lSq = lengthSq(dp.xy);
        float rSq = spheres[i].size * spheres[i].size / eToTheX(spheres[i].pos.z);
        if (lSq <= rSq) {
            dp.z = rSq - lSq;
            if (spheres[i].pos.z > nearestDepth) {
                sphereIndex = i;
                nearestDepth = spheres[i].pos.z;
                position = spheres[i].pos.xyz + vec3(dp.x, dp.y, sqrt(dp.z));
                normal = (position - spheres[i].pos.xyz) / spheres[i].size;
            }
        }
    }
    for (int i = lights.length() - 1; i >= 0; --i) {
        if (lengthSq(ray.direction.xy - lights[i].pos.xy) <= lights[i].intensity * 0.00001) {
            return lights[i].color;
        }
    }
    if (sphereIndex != -1) {
        // Calculates the sum of the effect of all lights on the sphere
        vec3 lightingInstensitySum = vec3(0.0);
        for (int i = lights.length() - 1; i >= 0; --i) {
            float lightDiffuseCoef, lightAttenuation;

            vec3 LightVector = lights[i].pos.xyz - position;
            float d = sqrt(lengthSq(LightVector));

            lightDiffuseCoef = diffuseCoef(normal, spheres[sphereIndex].pos.xyz, lights[i].pos.xyz);
            lightAttenuation = attinuation(lights[i].intensity, d);
            lightingInstensitySum += finalColor(lightDiffuseCoef, lightAttenuation, spheres[sphereIndex].color.xyz, lights[i].color.xyz);            
        }

        // Final Color
        float globalAmbientIntensity = 0.05;
        vec3 globalAmbientColor = vec3(1.0, 1.0, 1.0);
        finalSphereColor = (globalAmbientIntensity * globalAmbientColor) + min(lightingInstensitySum, 1.0);
        return vec4(finalSphereColor, 1.0);
    }
    sCoord px = vp.pixelCoord;	// A coordinate (vec2) storing the current pixel location
    sDCoord res = iChannelResolution[0].xy;	// A measurement (vec2) storing the resolution of the resolution of the texture
    sCoord loc = px / res;	// A coordinate (vec2) storing the normalized pixel location [0, 1)
    vec3 surfacePosition = vec3(loc, 0.0);
    vec3 surfaceNormal = vec3(0.0, 0.0, 1.0);
    vec2 texRatio = vp.resolution / res;
    
    // Lambertian reflectance
    // Diffuse coefficient
    vec4 lightingInstensitySum = vec4(0.0);
    for (int i = lights.length() - 1; i >= 0; --i) {
        vec3 lightPosition = vec3(((lights[i].pos.x + ratio) * 0.5) * texRatio.y, ((lights[i].pos.y + 1.0) * 0.5) * texRatio.y, 0.2);
        vec3 ls = lightPosition - surfacePosition;
        float d = sqrt(lengthSq(ls));
        vec3 lightVector = ls / d;
        float diffuseCoefficient = dot(surfaceNormal, lightVector);
        // Attenuated intensity
        float intensityInv = 1.0 / lights[i].intensity;
        float attenuatedIntensity = 1.0 / (1.0 + d * intensityInv + (d * d) * (intensityInv * intensityInv));
        // Diffuse intensity
        float diffuseIntensity = diffuseCoefficient * attenuatedIntensity;

        lightingInstensitySum += diffuseIntensity * lights[i].color;
    }
    loc = ratio * loc;	// Fill the viewport with the texture, i.e. zoom the texture in so it is always the same size as the viewport
    loc = waves(loc, time, vp);
    vec4 surfaceColor = texture(iChannel0, loc);
    return min(lightingInstensitySum, 1.0) * surfaceColor;
}

void mainImage(out color4 fragColor, in sCoord fragCoord)
{
	// viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray, iTime, iMouse);
}