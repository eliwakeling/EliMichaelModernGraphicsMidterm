color4 calcColor(in sViewport vp, in sRay ray, in float time)
{
    sSphere spheres[2];
    // out sSphere s, in sPoint pos, in sScalar size, in color4 color, in color4 lightColor
    float ratio = vp.resolution.x * vp.resolutionInv.y;
    initSphere(spheres[0], vec4(-ratio - 0.3, -0.8, -1.0, 0.0), 0.2, vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0));
    initSphere(spheres[1], vec4(-ratio - 0.0, -0.8, 0.0, 0.0), 0.2, vec4(0.0, 1.0, 0.0, 1.0), vec4(1.0));
    
    sLight lights[1];
    // out sLight l, in sPoint pos, in sScalar intensity, in color4 color
    initLight(lights[0], vec4(0.0, 0.0, 0.0, 0.0), 100.0, vec4(1.0, 1.0, 1.0, 1.0));
    
    int sphereIndex = -1;
    float nearestDepth = -100000.0;
    vec3 finalSphereColor = vec3(0.0);
    vec3 position, normal;
    for (int i = spheres.length() - 1; i >= 0; --i) {
        moveSphere(spheres[i].pos, time);
        
        vec3 dp;
        dp.xy = ray.direction.xy - spheres[i].pos.xy;
        float lSq = lengthSq(dp.xy);
        float rSq = spheres[i].size * spheres[i].size / pow(0.5772156649, spheres[i].pos.z);
        if (lSq <= rSq) {
            dp.z = rSq - lSq;
            if (spheres[i].pos.z > nearestDepth) {
                sphereIndex = i;
                nearestDepth = spheres[i].pos.z;
                position = spheres[i].pos.xyz + vec3(dp.x, dp.y, sqrt(dp.z));
                normal = (position - spheres[i].pos.xyz) / spheres[i].size;
            }
        }
    }
    for (int i = lights.length() - 1; i >= 0; --i) {
        if (lengthSq(ray.direction.xy - lights[i].pos.xy) <= 0.001) {
            return lights[i].color;
        }
    }
    if (sphereIndex != -1) {
        // Calculates the sum of the effect of all lights on the sphere
        vec3 lightingInstensitySum = vec3(0.0);
        for (int i = lights.length() - 1; i >= 0; --i) {
            float lightDiffuseCoef, lightAttenuation;

            vec3 LightVector = lights[i].pos.xyz - position;
            float d = sqrt(lengthSq(LightVector));

            lightDiffuseCoef = diffuseCoef(normal, spheres[sphereIndex].pos.xyz, lights[i].pos.xyz);
            lightAttenuation = attinuation(lights[i].intensity, d);
            lightingInstensitySum += finalColor(lightDiffuseCoef, lightAttenuation, spheres[sphereIndex].color.xyz, lights[i].color.xyz);            
        }

        // Final Color
        float globalAmbientIntensity = 0.05;
        vec3 globalAmbientColor = vec3(1.0, 1.0, 1.0);
        finalSphereColor = (globalAmbientIntensity * globalAmbientColor) + lightingInstensitySum;
        return vec4(finalSphereColor, 1.0);
    }
    return vec4(0.3, 0.3, 0.3, 1.0);
}

void mainImage(out color4 fragColor, in sCoord fragCoord)
{
	// viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray, iTime);
    //fragColor = texture(iChannel0, vp.uv);
}