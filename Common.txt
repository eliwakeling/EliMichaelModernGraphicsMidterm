//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4

// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4
//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4

// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4

// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
//    x: input whose squared length to calculate
sScalar lengthSq(sScalar x)
{
    return (x * x);
    //return dot(x, x); // for consistency with others
}
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}

//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}

//------------------------------------------------------------
// SPHERE INFO

// sSphere: sphere data structure
//		pos: position in scene
//		size: radius of the sphere
//		color: the color of the surface of the sphere
//		lightColor: the color of the light the sphere gives off
struct sSphere
{
    sPoint pos;
    sScalar size;
    color4 color;
    color4 lightColor;
};

// initSphere: fill in sphere variables
//    s:			output sphere info structure
//    pos:			input starting position
//    size:			input radius
//    color:		input color of sphere
//    lightColor:	input color of light source
void initSphere(out sSphere s, in sPoint pos, in sScalar size, in color4 color, in color4 lightColor)
{
    s.pos = pos;
    s.size = size;
    s.color = color;
    s.lightColor = lightColor;
}

//------------------------------------------------------------
// LIGHT INFO

// sLight: light data structure
//		pos: position in scene.
//		intensity: intensity of the light.
//		color = light color.
struct sLight
{
	sPoint pos;
    sScalar intensity;
    color4 color;
    
};
    
void initLight(out sLight l, in sPoint pos, in sScalar intensity, in color4 color) {
	l.pos = pos;
	l.intensity = intensity;
	l.color = color;
}

//------------------------------------------------------------
// LAMBERTIAN SHADING INFO

//diffuseCoef: find the diffuse coefficient between the light and the sphere.
// normal: the surface normal of the sphere.
// position: the position of the sphere.
// lightCenter: the position of the light.
float diffuseCoef(in sBasis normal, in sBasis position, in sBasis lightCenter) {
    
    //Calculate Light Vector.
    //vec3 lightVec = position - lightCenter;
    vec3 lightVec = normalize(lightCenter - position);
    //Calculate the diffuse Coefficient;
    float diffuseCoef = max(0.0, dot(normal, lightVec));        
    return diffuseCoef;
}

//attinuation: find the factor from which light fades according to distance between the object and the light.
// intensity: the intensity of the light.
// dist: the distance between the object and the light.
float attinuation (in sScalar intensity, in sScalar dist) {
   //Establish proper order of opperations.
   float dist1 = dist / intensity;
   float dist2 = (dist * dist) / (intensity * intensity);
   //Find the final Attinuation.
   float att = 1.0 / (1.0 + dist1 + dist2);
   return att;
}

//finalColor: combine the diffuse coeficient, the attinuation, and factor in the surface and light colors.
//diffcoef: the diffusal coefficient of the objects and lights.
//attinu: the attinuation factor of the objects and lights.
//surfaceColor: the color of the rendered object.
//lightColor: the color of the rendered light.
vec3 finalColor(in float diffcoef, in float attinu, in vec3 surfaceColor, in vec3 lightColor) {
    //Find the final color of the object in lambert.
    float diffIntense = diffcoef * attinu;
    vec3 finalCol = diffIntense * surfaceColor * lightColor;
    
    return finalCol;
}

//------------------------------------------------------------
// PHYSICS INFO
void moveSphere(out vec4 spherePos, in float time) {
    if (time < 20.0) {
    	spherePos.y += (3.0 * abs(sin(time * time))) / (time * time + 0.00001);
    }
    spherePos.x += time * 0.5;
}