//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4

// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4

// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
//    x: input whose squared length to calculate
sScalar lengthSq(sScalar x)
{
    return (x * x);
    //return dot(x, x); // for consistency with others
}
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}

// eToTheX: calculate e raised to the x power
//    x: input the power to raise e to
float eToTheX(in float x) {
    return pow(0.5772156649, x);
}

//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}

//------------------------------------------------------------
// SPHERE INFO

// sSphere: sphere data structure
//		pos: position in scene
//		size: radius of the sphere
//		color: the color of the surface of the sphere
//		lightColor: the color of the light the sphere gives off
struct sSphere
{
    sBasis pos;
    sScalar size;
    color4 color;
    color4 lightColor;
};

// initSphere: fill in sphere variables
//    s:			output sphere info structure
//    pos:			input starting position
//    size:			input radius
//    color:		input color of sphere
//    lightColor:	input color of light source
void initSphere(out sSphere s, in sBasis pos, in sScalar size, in color4 color, in color4 lightColor)
{
    s.pos = pos;
    s.size = size;
    s.color = color;
    s.lightColor = lightColor;
}

//------------------------------------------------------------
// LIGHT INFO

// sLight: light data structure
//		pos: position in scene.
//		intensity: intensity of the light.
//		color = light color.
struct sLight
{
	sBasis pos;
    sScalar intensity;
    color4 color;
};

// initLight: fill in light variables
//    s:			output light info structure
//    pos:			input position
//    size:			input intensity
//    color:		input color of light
void initLight(out sLight l, in sBasis pos, in sScalar intensity, in color4 color) {
	l.pos = pos;
	l.intensity = intensity;
	l.color = color;
}

//------------------------------------------------------------
// LAMBERTIAN SHADING INFO

//diffuseCoef: find the diffuse coefficient between the light and the sphere.
// normal: the surface normal of the sphere.
// position: the position of the sphere.
// lightCenter: the position of the light.
float diffuseCoef(in sBasis normal, in sBasis position, in sBasis lightCenter) {
    //Calculate Light Vector.
    vec3 ls = lightCenter - position;
    float d = sqrt(lengthSq(ls));
    vec3 lightVec = ls / d;
    //Calculate the diffuse Coefficient;
    return max(0.0, dot(normal, lightVec));
}

//attinuation: find the factor from which light fades according to distance between the object and the light.
// intensity: the intensity of the light.
// dist: the distance between the object and the light.
float attinuation(in sScalar intensity, in sScalar dist) {
   //Establish proper order of opperations.
   sScalar intensityInv = 1.0 / intensity;
   float dist1 = dist * intensityInv;
   float dist2 = (dist * dist) * (intensityInv * intensityInv);
   //Find the final Attinuation.
   return 1.0 / (1.0 + dist1 + dist2);
}

//finalColor: combine the diffuse coeficient, the attinuation, and factor in the surface and light colors.
//diffcoef: the diffusal coefficient of the objects and lights.
//attinu: the attinuation factor of the objects and lights.
//surfaceColor: the color of the rendered object.
//lightColor: the color of the rendered light.
vec3 finalColor(in float diffcoef, in float attinu, in vec3 surfaceColor, in vec3 lightColor) {
    //Find the final color of the object in lambert.
    float diffIntense = diffcoef * attinu;
    return diffIntense * surfaceColor * lightColor;
}

//------------------------------------------------------------
// PHYSICS INFO

// moveSphere: move the sphere along a path
//    spherePos:	output sphere position
//    time:			input time since beginning of program
//    tOff:			input time offset
//    yOff:			input y pos offset
void moveSphere(out sBasis spherePos, in float time, in float tOff, in float yOff) {
    if (time < 20.0) {
        float ts = (time * time) + tOff;
    	spherePos.y += (3.0 * abs(sin(ts))) / (ts + 0.00001) - yOff;
    }
    spherePos.x += time * 0.5;
}

//------------------------------------------------------------
// BLUR INFO

// gaussian7: perform a 7 wide/tall gaussian blur on a texture
//    tex:			input texture
//    center:		input center of the blur range
//    direction:	direction to perform the blur
vec4 gaussian7(in sampler2D tex, in vec2 center, in vec2 direction) {
	vec2 cp = center + 0.5 * direction;
	vec2 cn = cp - direction;
	vec4 color = (texture(tex, cp)
				+ texture(tex, cn)) * 35.0
        		+ (texture(tex, cp += direction)
				+ texture(tex, cn -= direction)) * 21.0
                + (texture(tex, cp += direction)
				+ texture(tex, cn -= direction)) * 7.0
				+ (texture(tex, cp += direction)
				+ texture(tex, cn -= direction));
	return (color * 0.0078125);
}

// relativeLuminance: calculate the luminance of a pixel
//    c: input pixel
float relativeLuminance (in vec3 c) {
	const vec3 w = vec3(0.2126, 0.7152, 0.0722);
	return dot(w, c);
}

// falloff: perform a falloff operation on a luminence value
//    lum: input luminence
float falloff (in float lum) {
	return lum * lum * (3.0 - 2.0 * lum);
}

//------------------------------------------------------------
// DISTORTION INFO

// distort: distort the backgroun texture by scrolling it diagonally
//    inputPos:	input texture
//    time:		input time since beginning of program
//    vp:		input viewport
vec2 distort(in vec2 inputPos, in float time, in sViewport vp) {
    vec2 outputPos;	// A vec2 storing the output pixel normalized coordinate [0, 1)
    outputPos = inputPos; // Set the output coordinate to the input one so as to modify it
    outputPos += time * 0.1;
    return outputPos;
}