color4 calcColor(in sViewport vp, in sRay ray)
{
    sSphere sphere;
    // out sSphere s, in sPoint pos, in sScalar size, in color4 color, in color4 lightColor
    initSphere(sphere, vec4(0.0, 0.0, 0.0, 0.0), 1.0, vec4(1.0, 0.0, 0.0, 1.0), vec4(1.0));
    
    vec3 dp;
    dp.xy = ray.direction.xy - sphere.pos.xy;
    float lSq = lengthSq(dp.xy);
    float rSq = sphere.size * sphere.size;
    if (lSq <= rSq) {
        dp.z = rSq - lSq;
        vec3 position = sphere.pos.xyz + vec3(dp.x, dp.y, sqrt(dp.z));
        vec3 normal = (position - sphere.pos.xyz) / sphere.size;
        
        //return sphere.color;
        return vec4(normal * 0.5 + 0.5, 1.0);
    }
    return vec4(0.0, 1.0, 1.0, 1.0);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	// viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}